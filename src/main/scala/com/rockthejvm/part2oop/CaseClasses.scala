package com.rockthejvm.part2oop

object CaseClasses {

  // lightweight data structures ( you store them in db or send them over the network or stored in collection
  // Once you made a case class you assign certain properties to the class
  // You cannot create a case class without constructor arguments ( alternative is case object )
  // Since all the instances of case classes without constructor args would mean that they are always equal and hence
  //   case objects make more sense.
  case class Person(name: String, age: Int) {
    // do some other stuff
  }

  //1 - class constructor args are now fields
  val daniel = new Person("Daniel", 25)
  val danielsAge = daniel.age

  //2 - toString, equals, hasCode are automatically generated for case classes
  val danielToString = daniel.toString    // Person(Daniel,25)
  val danielDuped = new Person("Daniel", 25)
  val isSameDaniel = daniel == danielDuped    // true ( if it was not case class then the check would have been for reference and result in false

  //3 - Utility Methods
  val danielYounger = daniel.copy(age = 5)  // new instance of case class with new age only

  //4 - companion objects automatically generated by compiler
  val thePersonSingleton = Person
  val daniel_v2 =  Person("Daniel",25)   //   Person.apply("Daniel", 25)

  //5- case classes are serializable
  // use-case: Akka

  //6 - Case classes have extractor patterns for PATTERN MATCHING

  // can't create CC with no arg list

  /*
  case class CaseClassWithNoArgs {
    // some code
  }

  val ccna = CaseClassWithNoArgs
  val ccna_v2 = CaseClassWithNoArgs   // all instances would be equal

  */
  // case object has property 2 & 5
  case object UnitedKingdom {
    // fields and methods
    def name = "The UK of GB and NI"
  }

  case class CCWithArgListNoArgs[A]()   // legal, mainly used in the context of generics

  /**
   * Exercise - Use case classes for LList
   * @param args
   */
  def main(args: Array[String]): Unit = {
    println(daniel)
    println(isSameDaniel)
  }
}
